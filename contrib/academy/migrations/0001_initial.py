# Generated by Django 2.1.7 on 2019-05-01 07:19

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Academy',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='唯一标识ID', primary_key=True, serialize=False, unique=True)),
                ('aca_avatar', models.ImageField(default='default.png', help_text='学院图标', null=True, upload_to='academies')),
                ('aca_nickname', models.CharField(help_text='学院简称', max_length=128, null=True)),
                ('aca_cname', models.CharField(help_text='学院名称(中)', max_length=128, null=True)),
                ('aca_ename', models.CharField(help_text='学院名称(英)', max_length=128, null=True)),
                ('aca_code', models.IntegerField(help_text='学院代码', null=True)),
                ('aca_phone', models.CharField(help_text='学院电话', max_length=128, null=True)),
                ('aca_fax', models.CharField(help_text='学院传真', max_length=128, null=True)),
                ('aca_href', models.URLField(help_text='学院网址', max_length=256, null=True)),
                ('aca_brief', models.TextField(help_text='学院简介')),
                ('aca_user', models.ForeignKey(help_text='学院负责人', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='aca_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '学院',
                'verbose_name_plural': '学院',
                'db_table': 'academy',
                'permissions': [('can_insert_academy', '新增学院'), ('can_delete_academy', '删除学院'), ('can_update_academy', '修改学院'), ('can_search_academy', '查询学院')],
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Major',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='唯一标识ID', primary_key=True, serialize=False, unique=True)),
                ('maj_name', models.CharField(help_text='学科名称', max_length=128, null=True)),
                ('maj_code', models.IntegerField(help_text='学科编号', null=True)),
                ('maj_type', models.CharField(choices=[('C1', '专业硕士学位'), ('C2', '学科硕士学位')], help_text='学科类型', max_length=128)),
                ('maj_first', models.BooleanField(help_text='是否一级学科')),
                ('maj_second', models.BooleanField(help_text='是否二级学科')),
                ('maj_first_uuid', models.UUIDField(help_text='所属一级学科', null=True)),
                ('maj_setup_time', models.DateField(help_text='获批时间')),
                ('maj_degree', models.CharField(choices=[('D1', '哲学'), ('D2', '经济学'), ('D3', '法学'), ('D4', '教育学'), ('D5', '文学'), ('D6', '历史学'), ('D7', '理学'), ('D8', '工学'), ('D9', '农学'), ('D10', '医学'), ('D11', '军事学'), ('D12', '管理学'), ('D13', '艺术学')], help_text='学位类型', max_length=128)),
            ],
            options={
                'verbose_name': '学科专业',
                'verbose_name_plural': '学科专业',
                'db_table': 'major',
                'permissions': [('can_insert_major', '新增学科专业'), ('can_delete_major', '删除学科专业'), ('can_update_major', '修改学科专业'), ('can_search_major', '查询学科专业')],
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='MidtermExams',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academy', models.CharField(default='', help_text='学院名称', max_length=128)),
                ('stu_count', models.IntegerField(default=0, help_text='学生数量')),
                ('schedule_count', models.IntegerField(default=0, help_text='按期考核人数')),
                ('delay_count', models.IntegerField(default=0, help_text='延期考核人数')),
                ('delay_reason', models.TextField(default='', help_text='延期考核原因')),
                ('delay_proportion', models.IntegerField(default=0, help_text='延期考核比例')),
                ('track_count', models.IntegerField(default=0, help_text='被跟踪人数')),
                ('track_proportion', models.IntegerField(default=0, help_text='被跟踪比例')),
                ('fail_count', models.IntegerField(default=0, help_text='不合格人数')),
                ('fail_proportion', models.IntegerField(default=0, help_text='不合格比例')),
                ('time', models.DateField(default='2019', help_text='入学年份')),
            ],
            options={
                'verbose_name': '中期考核情况统计',
                'verbose_name_plural': '中期考核情况统计',
            },
        ),
        migrations.CreateModel(
            name='OpeningReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academy', models.CharField(default='', help_text='学院名称', max_length=128)),
                ('stu_count', models.IntegerField(default=0, help_text='学生数量')),
                ('schedule_count', models.IntegerField(default=0, help_text='按期开题人数')),
                ('delay_count', models.IntegerField(default=0, help_text='延期开题人数')),
                ('fail_count', models.IntegerField(default=0, help_text='开题不通过人数')),
                ('time', models.DateField(default='2019', help_text='入学年份')),
            ],
            options={
                'verbose_name': '开题报告统计',
                'verbose_name_plural': '开题报告统计',
            },
        ),
        migrations.CreateModel(
            name='PaperQuality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academy', models.CharField(default='', help_text='学院名称', max_length=128)),
                ('major', models.CharField(default='', help_text='专业名称', max_length=128)),
                ('full_time_count', models.IntegerField(default=0, help_text='全日制学生数量')),
                ('delay_count', models.IntegerField(default=0, help_text='延期人数')),
                ('delay_reason', models.TextField(default='', help_text='延期原因')),
                ('paper_stu_count', models.IntegerField(default=0, help_text='论文检测人数')),
                ('paper_pass_count', models.IntegerField(default=0, help_text='论文检测结果一次通过人数')),
                ('paper_pass_proportion', models.IntegerField(default=0, help_text='论文检测结果一次通过率')),
                ('paper_fail_count', models.IntegerField(default=0, help_text='论文检测结果不合格人数')),
                ('paper_fail_proportion', models.IntegerField(default=0, help_text='论文检测结果不合格占比')),
                ('paper_fifteen_count', models.IntegerField(default=0, help_text='论文检测结果15%以下人数')),
                ('paper_fifteen_proportion', models.IntegerField(default=0, help_text='论文检测结果15%以下占比')),
                ('paper_ten_count', models.IntegerField(default=0, help_text='论文检测结果10%以下人数')),
                ('paper_ten_proportion', models.IntegerField(default=0, help_text='论文检测结果10%以下占比')),
                ('blind_trial_proportion', models.IntegerField(default=0, help_text='盲审比例')),
                ('blind_trial_count', models.IntegerField(default=0, help_text='盲审未通过人数')),
                ('reply_count', models.IntegerField(default=0, help_text='答辩未通过人数')),
                ('evaluation_count', models.IntegerField(default=0, help_text='评优名额')),
                ('evaluation_result', models.IntegerField(default=0, help_text='评优评选结果')),
                ('graduate_count', models.IntegerField(default=0, help_text='毕业人数')),
                ('graduate_proportion', models.IntegerField(default=0, help_text='毕业率')),
                ('degree_count', models.IntegerField(default=0, help_text='获学位人数')),
                ('degree_proportion', models.IntegerField(default=0, help_text='获学位率')),
                ('time', models.DateField(default='2019', help_text='入学年份')),
            ],
            options={
                'verbose_name': '学位论文质量统计',
                'verbose_name_plural': '学位论文质量统计',
            },
        ),
        migrations.CreateModel(
            name='ReformResults',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academy', models.CharField(default='', help_text='学院名称', max_length=128)),
                ('project_count', models.IntegerField(default=0, help_text='研究生教育相关教改项目立项数量')),
                ('paper_count', models.IntegerField(default=0, help_text='发表研究生教育相关教改论文数量')),
                ('textbook_count', models.IntegerField(default=0, help_text='出版研究生教材数量')),
                ('award_count', models.IntegerField(default=0, help_text='研究生教育相关获奖数量')),
                ('course_count', models.IntegerField(default=0, help_text='精品/在线课程建设数量')),
                ('base_count', models.IntegerField(default=0, help_text='实践基地建设数量')),
                ('exchange_project_count', models.IntegerField(default=0, help_text='研究生国际交流数量')),
                ('time', models.DateField(default='2019', help_text='入学年份')),
            ],
            options={
                'verbose_name': '教育改革成果统计',
                'verbose_name_plural': '教育改革成果统计',
            },
        ),
        migrations.CreateModel(
            name='Research',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='唯一标识ID', primary_key=True, serialize=False, unique=True)),
                ('res_name', models.CharField(help_text='研究方向', max_length=128, null=True)),
            ],
            options={
                'verbose_name': '研究方向',
                'verbose_name_plural': '研究方向',
                'db_table': 'research',
                'permissions': [('can_insert_research', '新增研究方向'), ('can_delete_research', '删除研究方向'), ('can_update_research', '修改研究方向'), ('can_search_research', '查询研究方向')],
                'default_permissions': (),
            },
        ),
        migrations.AddField(
            model_name='major',
            name='research',
            field=models.ManyToManyField(help_text='科研方向', related_name='research', to='学院管理.Research'),
        ),
        migrations.AddField(
            model_name='academy',
            name='majors',
            field=models.ManyToManyField(related_name='majors', to='学院管理.Major'),
        ),
    ]
